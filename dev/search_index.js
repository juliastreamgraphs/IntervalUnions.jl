var documenterSearchIndex = {"docs":
[{"location":"#IntervalUnions-1","page":"Getting Started","title":"IntervalUnions","text":"","category":"section"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"TODO","category":"page"},{"location":"intervals/#Intervals-1","page":"Intervals","title":"Intervals","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"The type Interval implements a basic interval of real numbers like [0,1] or ]2.1,3.14]. The following section gives some basic examples of operations on Intervals. Note that unions of disjoint Intervals cannot be computed and will throw an error. To work with disjoint intervals, use IntervalUnions instead. ","category":"page"},{"location":"intervals/#Example-Usage-1","page":"Intervals","title":"Example Usage","text":"","category":"section"},{"location":"intervals/#Interval-Definition-1","page":"Intervals","title":"Interval Definition","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"An Interval is defined as:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"A left limit, which has to be a Real number.\nA right limit, which has to be a Real number.\nTwo booleans indicating whether the interval is closed on each side.","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"The full constructor enables to specify each attribute directly:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> l = Interval(1.6,true,2.3,true)\n]1.6,2.3[","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"Since Intervals are most of the time closed on both side, a simplified constructor can be used as a shortcut:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(0,1)\n[0,1]\njulia> i = Interval(0,false,1,false)\n[0,1]","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"It is possible to omit closed limits:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> j = Interval(0.2,true,2)\n]0.2,2]\njulia> j = Interval(0.2,true,2,false)\n]0.2,2]\njulia> k = Interval(2,3,true)\n[2,3[\njulia> k = Interval(2,false,3,true)\n[2,3[","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"Finally, the empty interval can be constructed with no argument:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> m = Interval()\n∅","category":"page"},{"location":"intervals/#Basic-queries-1","page":"Intervals","title":"Basic queries","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"Once an Interval is built, one has access to very simple queries to inspect the interval:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(0,2)\n[0,2]\njulia> left(i)\n0\njulia> right(i)\n2\njulia> empty(i)\nfalse\njulia> empty(Interval())\ntrue\njulia> cardinal(i)\n2\njulia> cardinal(Interval(1,1))\n0\njulia> cardinal(Interval())\n0","category":"page"},{"location":"intervals/#Order-1","page":"Intervals","title":"Order","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"Intervals implement a lexicographical order:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> Interval(0,2) < Interval(1,2,true)\ntrue\njulia> Interval(1,3) > Interval(-1,10)\ntrue\njulia> Interval(0,1) < Interval(0,1,true)\ntrue","category":"page"},{"location":"intervals/#Inclusivity-1","page":"Intervals","title":"Inclusivity","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"It is possible to check if a given number belongs to an interval:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(0,1)\n[0,1]\njulia> 0 in i\ntrue\njulia> 1.000001 in i\nfalse\njulia> j = Interval(0,1,true)\n[0,1[\njulia> 1 ∈ j\nfalse\njulia> 0.99999999 in j\ntrue","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"It is also possible to check if an interval is included in another one:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(0,1)\n[0,1]\njulia> j = Interval(0,1,true)\n[0,1[\njulia> j ⊆ i\ntrue\njulia> i ⊆ j\nfalse","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"Or if two intervals are disjoint:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(0,1,true)\n[0,1[\njulia> j = Interval(1,true,2)\n]1,2]\njulia> disjoint(i,j)\ntrue\njulia> k = Interval(-1,0)\n]-1,0]\njulia> disjoint(i,k)\nfalse","category":"page"},{"location":"intervals/#Intersection-1","page":"Intervals","title":"Intersection","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"We can compute the intersection of two Intervals:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(0,1)\n[0,1]\njulia> j = Interval(0.4,true,1,true)\n]0.4,1[\njulia> i ∩ j\n]0.4,1[\njulia> k = Interval(0.2,true,0.8)\n]0.2,0.8]\njulia> i ∩ k\n]0.2,0.8]\njulia> intersect(k,j)\n]0.4,0.8[\njulia> intersect(i,Interval())\n∅","category":"page"},{"location":"intervals/#Union-1","page":"Intervals","title":"Union","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"We can compute theunion of two Intervals:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(0,1)\n[0,1]\njulia> j = Interval(0.4,true,2.1,true)\n]0.4,2.1[\njulia> i ∪ j\n[0,2.1[\njulia> i ∪ Interval()\n[0,1]","category":"page"},{"location":"intervals/#Sampling-1","page":"Intervals","title":"Sampling","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"We can sample uniform random numbers from Intervals:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(2,4,true)\n[2,4[\njulia> sample(i)\n3.935796996224805\njulia> i = Interval(3,true,6)\n]3,6]\njulia> sample(i,4)\n4-element Array{Float64,1}:\n 5.543827369817867 \n 4.678054798740224 \n 3.1740822420010355\n 3.6870186624440504","category":"page"},{"location":"intervals/#Similarity-metrics-1","page":"Intervals","title":"Similarity metrics","text":"","category":"section"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"Finally, we can compare two Intervals with different metrics:","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"Jaccard coefficient:  $ J(X,Y)=\\frac{\\left| X \\cap Y \\right|}{\\left| X \\cup Y \\right|} $\nOverlap coefficient: $ O\\left(X,Y\\right)=\\frac{\\left| X \\cap Y \\right|}{min\\left( \\left|X\\right|,\\left|Y\\right| \\right)} $\nDice coefficient: $ D\\left(X,Y\\right)=\\frac{2\\left| X \\cap Y \\right|}{\\left|X\\right|+\\left|Y\\right|} $","category":"page"},{"location":"intervals/#","page":"Intervals","title":"Intervals","text":"julia> i = Interval(3,true,6)\n]3,6]\njulia> j = Interval(4,7)\n[4,7]\njulia> jaccard(i,j)\n0.5\njulia> overlap_coefficient(i,j)\n0.6666666666666666\njulia> dice_coefficient(i,j)\n0.6666666666666666","category":"page"},{"location":"intervalunions/#IntervalUnions-1","page":"IntervalUnions","title":"IntervalUnions","text":"","category":"section"},{"location":"intervalunions/#","page":"IntervalUnions","title":"IntervalUnions","text":"TODO","category":"page"}]
}
